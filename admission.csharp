using System;
using System.Collections.Generic;
using System.Linq;

class Student
{
    public string Name { get; set; }
    public int Roll { get; set; }
    public double GPA { get; set; }
    public List<string> Choices { get; set; }
    public string AdmittedDepartment { get; set; } = "Not Admitted";
}

class Program
{
    static List<string> Departments = new List<string> { "CSE", "EEE", "BBA", "ENG", "LLB" };
    static int MaxSeatPerDept = 5;

    static void Main()
    {
        Console.Write("Enter number of students: ");
        int total = int.Parse(Console.ReadLine());

        List<Student> students = new List<Student>();

        for (int i = 0; i < total; i++)
        {
            Console.WriteLine($"\nStudent #{i + 1}");
            Console.Write("Name: ");
            string name = Console.ReadLine();

            Console.Write("Roll: ");
            int roll = int.Parse(Console.ReadLine());

            Console.Write("GPA: ");
            double gpa = double.Parse(Console.ReadLine());

            Console.WriteLine("Enter 3 department choices (CSE, EEE, BBA, ENG, LLB):");
            var choices = new List<string>();
            while (choices.Count < 3)
            {
                Console.Write($"Choice #{choices.Count + 1}: ");
                string choice = Console.ReadLine().ToUpper();
                if (Departments.Contains(choice) && !choices.Contains(choice))
                    choices.Add(choice);
                else
                    Console.WriteLine("Invalid or duplicate. Try again.");
            }

            students.Add(new Student { Name = name, Roll = roll, GPA = gpa, Choices = choices });
        }

        // Sort by GPA (Merit list)
        var meritList = students.OrderByDescending(s => s.GPA).ThenBy(s => s.Roll).ToList();

        // Seat count
        var departmentSeats = Departments.ToDictionary(d => d, d => 0);

        // Admission
        foreach (var student in meritList)
        {
            var available = student.Choices.FirstOrDefault(d => departmentSeats[d] < MaxSeatPerDept);
            if (available != null)
            {
                student.AdmittedDepartment = available;
                departmentSeats[available]++;
            }
        }

        // Group by Admitted Department
        var grouped = meritList
            .GroupBy(s => s.AdmittedDepartment)
            .OrderBy(g => g.Key); // Alphabetical by department

        Console.WriteLine("\n--- Department-wise Admission List ---");
        foreach (var group in grouped)
        {
            Console.WriteLine($"\nDepartment: {group.Key}");
            foreach (var student in group)
            {
                Console.WriteLine($"  Roll: {student.Roll}, Name: {student.Name}, GPA: {student.GPA}");
            }
        }

        // Optional: Display seat summary
        Console.WriteLine("\n--- Department-wise Seat Summary ---");
        departmentSeats.ToList().ForEach(d =>
        {
            Console.WriteLine($"{d.Key}: {d.Value} students admitted");
        });
    }
}
